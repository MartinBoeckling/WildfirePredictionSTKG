NAColumnPlot <- function(df){
# assert
stopifnot(class(df) == c('data.table', 'data.frame'))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
NAColumnPlot <- function(df){
# assert
stopifnot(class(df) == c('data.table', 'data.frame'))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, fill=colorPalette[1], color='white') +
xlab('Elevation in meters') +
ylab('Count') +
theme_minimal()
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, fill=colorPalette[1]) +
xlab('Elevation in meters') +
ylab('Count') +
theme_minimal()
NAColumnPlot <- function(df){
# assert
stopifnot('data.frame' %in% class(df))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
NAColumnPlot <- function(df){
# assert
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
rm(weatherNADf)
NAColumnPlot <- function(df){
# check if input variable is of class data.frame
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
# extract column wise percentage of NA Values by summing boolean return of function is.na up
NADf <- data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
)
#
NADf <- tibble::rownames_to_column(NADf, var = 'Column')
# plot na fraction in a bar diagram
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(data = weather, aes(x=TMAX)) +
geom_histogram()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(bins=15)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 15)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 5)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 2)
### Temperature ----------------------------------------------------------------
#### TMAX
# print distribution statistics to console
summary(weather$TMAX)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 4)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 5) +
theme_minimal() +
xlab('maximum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('maximum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
ggplot(., aes(x=TMIN)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('maximum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
ggplot(., aes(x=TMIN)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('minimum Temperature in °C') +
ylab('Count')
#### TAVG
weather %>%
filter(TAVG <= 56.67 & TAVG >= -42.78) %>%
ggplot(., aes(x=TAVG)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('average Temperature in °C') +
ylab('Count')
#### TAVG
# print distribution statistics to console
summary(weather$TAVG)
#### TMIN
summary(weather$TMIN)
dnorm()
dnorm
# Elevation ---------------------------------------------------------------
# read elevation dataset
rasterElevation <- raster::raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
library(raster)
# Elevation ---------------------------------------------------------------
# read elevation dataset
rasterElevation <- raster::raster('~/GitHub/wildfirearea/data/elevation/Tiff elevation/CaliforniaElevation.tif')
# convert rasterElevation type of raster to dataframe
# convert to SpatialPoints Dataframe
rasterElevationPoint <- raster::rasterToPoints(rasterElevation, spatial = TRUE)
rasterElevation
gc()
View(rasterElevation)
# convert Spatial Points dataframe to solely dataframe
rasterElevationDf <- data.frame(rasterElevation)
# convert Spatial Points dataframe to solely dataframe
rasterElevationDf <- as.data.frame(rasterElevation)
rm(rasterElevation)
weather$DATE
as.Date(weather$DATE, %Y)
as.Date(weather$DATE, '%Y')
library(lubridate)
year(weather$DATE)
ggplot(weather, aes(x = year(DATE), y = TMAX)) +
geom_boxplot()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
# plot histogram over distribution
ggplot(., aes(x = year(DATE), y = TMAX)) +
geom_boxplot()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = YEAR, y = TMAX)) +
geom_boxplot()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = YEAR, y = TMAX, group=YEAR)) +
geom_boxplot()
weather %>%
filter(TAVG <= 56.67 & TAVG >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = YEAR, y = TAVG, group=YEAR)) +
geom_boxplot()
weather %>%
filter(TAVG <= 56.67 & TAVG >= -42.78) %>%
mutate(MONTH = month(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = MONTH, y = TAVG, group=MONTH)) +
geom_boxplot()
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR))
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR), alpha = .5)
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = as.character(year(DATE))) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR), alpha = .5)
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = as.character(year(DATE))) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR), alpha = .5) +
scale_color_manual(values = colorPalette)
=======
renv::restore()
install.package('KernSmooth')
install.packages('KernSmooth')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
library(ggplot2)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE), colour=colorPalette[1]) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE),
colour=colorPalette[1], size=1) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour=colorPalette[1], fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE),
colour=colorPalette[2], size=1) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour=colorPalette[1], fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE),
colour=colorPalette[2], size=0.5) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE),
colour=colorPalette[1], size=0.5) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE),
colour=colorPalette[1], size=0.5) +
theme_bw() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE),
colour=colorPalette[1], size=0.5) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(data = weather, aes(x=TMAX)) +
geom_histogram()
ggplot(data = weather, aes(x=TMAX)) +
geom_histogram() +
theme_minimal()
renv::status()
renv::restore()
library(dplyr)
# import packages---------------------------------------------------------------
library(ggplot2)
### Temperature ----------------------------------------------------------------
#### TMAX
summary(weather$TMAX)
test <- weather %>%
filter(TMAX > 16)
>>>>>>> Stashed changes
weather %>%
filter('TMIN' <= 56.67 & 'TMIN' >= -42.78) %>%
# plot histogram over distribution
ggplot(., aes(x='TMIN')) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('minimum Temperature in °C') +
ylab('Count')
library(dplyr)
weather %>%
filter('TMIN' <= 56.67 & 'TMIN' >= -42.78) %>%
# plot histogram over distribution
ggplot(., aes(x='TMIN')) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('minimum Temperature in °C') +
ylab('Count')
library(ggplot2)
weather %>%
filter('TMIN' <= 56.67 & 'TMIN' >= -42.78) %>%
# plot histogram over distribution
ggplot(., aes(x='TMIN')) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('minimum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
# plot histogram over distribution
ggplot(., aes(x=TMIN)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('minimum Temperature in °C') +
ylab('Count')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
test
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
re
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# import packages --------------------------------------------------------------
library(ggplot2)
library(dplyr)
### Temperature ----------------------------------------------------------------
# general limit
maxTemperature <- 56.67
minTemperature <- -42.78
# filter data out that is over maximum and minimum
histogramPlot(weather, 'TMAX', minTemperature, maxTemperature, 5, 'max temperature in °C')
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
rlang::last_error()
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
weather %>%
filter(TMAX <= 10 & column >= 0)
weather %>%
filter(TMAX <= 10 & TMAX >= 0)
weather %>%
filter('TMAX' <= 10 & 'TMAX' >= 0)
weather %>%
filter(!!'TMAX' <= 10 & !!'TMAX' >= 0)
weather %>%
filter(as.symbol('TMAX') <= 10 & as.symbol('TMAX') >= 0)
weather %>%
filter(TMAX <= 10 & column >= 0)
weather %>%
filter(TMAX <= 10 & TMAX >= 0)
test <- 'TMAX'
weather %>%
filter(as.symbol(test) <= 10 & as.symbol(test) >= 0)
weather %>%
filter(!!as.symbol(test) <= 10 & !!as.symbol(test) >= 0)
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=!!as.symbol(column))) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
ggplot(weather, aes(x=!!as.symbol(test))) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1])
ggplot(weather, aes(x=!!as.symbol(test))) +
geom_histogram(binwidth = 50, fill=colorPalette[1])
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=!!as.symbol(column))) +
geom_histogram(binwidth = binWidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=!!as.symbol(column))) +
geom_histogram(binwidth = binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
