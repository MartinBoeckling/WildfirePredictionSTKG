names(tifImage) <- 'elevation'
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
print(class(tif))
}
tif
st_warp(tif, tifImage)
library(raster)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
grid <- raster(fileList[1])
plot(grid)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
grid1 <- raster(fileList[1])
rm(grid)
grid2 <- raster(fileList[2])
gridTotal <- merge(grid1, grid2)
plot(gridTotal)
rm(list=ls())
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
gridTotal <- raster(fileList[1])
for (file in fileList){
index = which(file == fileList)
print(index)
grid <- raster(file)
gridTotal <- merge(gridTotal, grid)
}
plot(gridTotal)
gridTotal
rm(list=ls())
#------------------------------import packages----------------------------------
library(stars)
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
names(tif) <- 'elevation'
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file, package = 'stars')
names(tifImage) <- 'elevation'
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
print(class(tif))
}
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(fileList[index], package = 'stars')
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
print(class(tif))
}
fileList[34]
test <- read_stars(fileList[34])
plot(test)
tif <- st_mosaic(tif, test)
class(tif)
tif
class(fileList)
typeof(fileList)
type(fileList)
objects(fileList)
read_stars(.x = fileList)
read_stars(.x = fileList, along = 3)
?read_stars(.x = fileList, along = 3)
?read_stars(.x = fileList, along = NA)
read_stars(.x = fileList, along = NA)
?st_mosaic
st_mosaic(.x=fileList)
warnings()
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
?list.files
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif', full.names = TRUE)
st_mosaic(.x=fileList)
totalTif <- st_mosaic(.x=fileList)
plot(totalTif)
?st_mosaic
fileName <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
fileName <- 'C/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
totalTif <- st_mosaic(.x=fileList, dst = fileName)
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
fileName <- 'C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
read_stars('~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(totalTif)
test <- read_stars('~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(test)
totalTif <- st_mosaic(.x=fileList)
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
totalTif <- read_stars('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
test <- st_warp(totalTif, crs = 3857, cellsize = 90)
library(raster)
totalTif <- raster('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(totalTif)
totalTif <- read_stars('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(totalTif)
rm(list=ls())
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif', full.names = TRUE)
?paste0
getwd()
setwd('C:/Users/D070547/Documents/GitHub/wildfirearea')
getwd()
fileName <- paste0(getwd(), '/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
# merge file together with mosaic
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
californiaElevation <- read_stars('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(californiaElevation)
californiaElevation <- raster('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
californiaElevation
plot(californiaElevation)
test <- projectRaster(californiaElevation, crs = crs('EPSG:3785'))
rm(list=ls())
library(data.table)
#-------------------------------Weather-----------------------------------------
weather <- data.table::fread('~/GitHub/wildfirearea/Data/Weather/weather.csv')
summary(weather)
library(data.table)
#-------------------------------Weather-----------------------------------------
weather <- data.table::fread('~/GitHub/wildfirearea/data/weather/weather.csv')
unique(weather$DATE)
library(lubridate)
unique(format(as.Date(weather$DATE), "%Y-%m"))
n(weather)
length(weather)
summary(weather)
library(DataExplorer)
install.packages('DataExplorer')
library(DataExplorer)
plot_intro(weather)
gc()
plot_missing()
plot_missing(weather)
#-----------------------------import packages-----------------------------------
library(ggplot2)
plot_intro(weather, ggtheme = theme_gray)
plot_missing(weather, ggtheme = theme_gray)
plot_missing(weather, missing_only = TRUE)
library(tidyverse)
library(tidyverse)
summary(weather)
test <- weather %>%
select(!contains('ATTRIBUTES'))
summary(test)
weather <- weather %>%
select(!contains('ATTRIBUTES'))
plot_missing(weather)
plot_missing(weather, ggtheme = theme_gray())
plot_missing(weather, ggtheme = theme_gray)
rm(test)
plot_intro(weather)
introPlot <- plot_intro(weather)
introPlot %>%
theme_gray()
View(introPlot)
plot_bar(weather)
plot_missing(weather)
plot_histogram(weather)
gc()
View(weather)
gc()
colorPalette <- grey.colors(n=20)
#US Maps Fire
#Density Maps
us_maps <- map_data("county")
#US Maps Fire
#Density Maps
us_maps <- map_data("county")
california_map <- us_maps %>%
filter(region == "california")
ggplot()+
geom_polygon(data = california_map, aes(x=long, y=lat, group=group), color = "black", fill = "grey90") +
geom_density2d(data = fires, aes(x=fires$LONGITUDE, y=fires$LATITUDE), color = "darkred") +
coord_map('albers', lat0=30, lat1=40) +
ggtitle("Density Fire in California") +
theme(plot.title = element_text(hjust = 0.5))
ggplot()+
geom_polygon(data = california_map, aes(x=long, y=lat, group=group), color = "black", fill = "grey90") +
# geom_density2d(data = fires, aes(x=fires$LONGITUDE, y=fires$LATITUDE), color = "darkred") +
coord_map('albers', lat0=30, lat1=40) +
ggtitle("Density Fire in California") +
theme(plot.title = element_text(hjust = 0.5))
renv::snapshot()
plot_histogram(weather)
summary(weather$TMAX)
'This R script provides the functions for the data understanding of the spatial
data that is used in the master thesis. The data will be analyzed by its values
and provides the visualizations used for the data understanding phase. The
following data categories are used within this script:
- Elevation data (Path/to/file)
- Land Cover & Vegetation (Path/to/file)
- Openstreet map
- Weather
- Wildfire
'
plot_missing(weather)
sum(is.na(weather))
is.na.data.frame(weather)
sum(is.na.data.frame(weather))
# plot count of missing elements
# extract na count out of weather dataframe
weatherNACount <- sapply(weather, function(column) sum(is.na(column)))
weatherNADf <- data.frame(weatherNACount)
View(weatherNADf)
# plot count of missing elements
# extract na count out of weather dataframe
weatherNADf <- data.frame(sapply(weather, function(column) sum(is.na(column))))
rm(weatherNACount)
?data.frame
# plot count of missing elements
# extract na count out of weather dataframe
weatherNADf <- data.frame(t(sapply(weather, function(column) sum(is.na(column)))))
View(weatherNADf)
# plot count of missing elements
# extract na count out of weather dataframe
weatherNADf <- data.frame(t(sapply(weather, function(column) sum(is.na(column))/len(weather))))
n(weather)
# plot count of missing elements
# extract na count out of weather dataframe
weatherNADf <- data.frame(t(sapply(weather, function(column) sum(is.na(column))/length(weather))))
weatherNADf
View(weatherNADf)
length(weather)
# plot count of missing elements
# extract na count out of weather dataframe
weatherNADf <- data.frame(t(sapply(weather, function(column) sum(is.na(column))/nrow(weather))))
View(weatherNADf)
weatherNADf <- data.frame(
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
)
View(weatherNADf)
col(weather)
col(weatherNADf)
View(weatherNADf)
summary(weatherNADf)
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
weatherNADf <- data.frame(NAFraction =
sapply(weather, function(column) sum(is.na(column))/nrow(weather)),
)
weatherNADf <- data.frame(NAFraction =
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
)
View(weatherNADf)
rownames_to_column(weatherNADf, var = 'Column')
weatherNADf <- rownames_to_column(weatherNADf, var = 'Column')
View(weatherNADf)
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat = identify) +
coord_flip()
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat = identify) +
coord_flip()
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat = 'identify') +
coord_flip()
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar() +
coord_flip()
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat="identity") +
coord_flip()
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat='identity') +
coord_flip()
weatherNADf <- arrange(data.frame(NAFraction =
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
))
View(weatherNADf)
weatherNADf <- arrange(
data.frame(NAFraction =
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
),
NAFraction)
View(weatherNADf)
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat='identity') +
coord_flip()
weatherNADf <- rownames_to_column(weatherNADf, var = 'Column')
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat='identity') +
coord_flip()
View(weatherNADf)
weatherNADf <- arrange(
data.frame(NAFraction =
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
),
NAFraction)
weatherNADf <- rownames_to_column(weatherNADf, var = 'Column')
ggplot(data = weatherNADf, aes(x=Column, y=NAFraction)) +
geom_bar(stat='identity') +
coord_flip()
plot_missing
rm(california_map, introPlot, us_maps)
ggplot(data = weather, aes(x=PRCP)) +
geom_histogram()
# import packages---------------------------------------------------------------
library(ggplot2)
ggplot(data = weather, aes(x=PRCP)) +
geom_histogram()
ggplot(data = weather, aes(x=TAVG)) +
geom_histogram()
### Station attributes -------------------------------------------------
#### Elevation
summary(weather$ELEVATION)
### Temperature ----------------------------------------------------------------
#### TMAX
summary(weather$TMAX)
View(weatherNADf)
create_report(weather)
library(DataExplorer)
create_report(weather)
gc()
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
library(sf)
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
california_spol <- as_Spatial(california_boundary)
plot(SpatialPolygonsDataFrame)
californiaSpol <- as_Spatial(california_boundary)
plot(californiaSpol)
View(california_spol)
california_spol@data
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
californiaSpol
typeof(californiaSpol)
class(californiaSpol)
rm(california_spol)
View(california_boundary)
plot(california_boundary$geometry)
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
californiaSpol <- as_Spatial(california_boundary)
plot(californiaSpol)
plot(california_boundary$geometry)
plot(california_boundary$geometry, axes=TRUE)
library(sp)
?as_Spatial
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
californiaSpol <- as_Spatial(california_boundary)
plot(californiaSpol)
plot(californiaSpol, axes=TRUE)
#-------------------- Basic parameters-------------------------
prj_m <- 'EPSG:3785'
californiaSpol
prjLonLat <- 'EPSG:4269'
st_crs(californiaSpol) = 4269
crs(californiaSpol) = prjLonLat
CRS(californiaSpol) = prjLonLat
CRS(californiaSpol) = prjLonLat
library(sp)
library(sf)
crs(californiaSpol)
CRS(californiaSpol)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram()
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 5)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 10)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 20)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30)
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
californiaSpol <- as_Spatial(california_boundary)
CRS(californiaSpol) = prjLonLat
plot(californiaSpol)
View(californiaSpol)
spTransform(californiaSpol, CRS(prjLonLat))
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
plot(californiaSpol)
plot(californiaSpol, axes=TRUE)
data.frame(californiaSpol)
as.data.frame(californiaSpol)
View(californiaSpol)
View(california_boundary)
View(california_boundary[[15]][[1]])
california_boundary[[15]][[1]][[1]][[1]]
ggplot(californiaSpol, aes(x=x, y=y)) +
geom_polygon()
ggplot(californiaSpol) +
geom_polygon()
ggplot(californiaSpol, aes(x, y)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon()
View(californiaSpol)
californiaSpol@polygons[[1]]@Polygons[[1]]
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon()
californiaSpol <- as_Spatial(california_boundary)
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon()
View(californiaSpol)
californiaSpol@polygons
ggplot(californiaSpol, aes(x=long, y=lat, group=plotOrder)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colur='black', fill'white')
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colur='black', fill='white')
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colour='black', fill='white')
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon(colour='black', fill='white')
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colour='black', fill='white')
californiaSpol <- sf::st_as_sf(californiaSpol)
View(californiaSpol)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white')
californiaSpol <- as_Spatial(california_boundary)
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
tidy(californiaSpol)
library(rgdal)
ggplot(californiaSpol) +
geom_polygon(colour='black', fill='white') +
geom_point(data = weather, aes(x= longitude, y=latitude))
colnames(weather)
ggplot(californiaSpol) +
geom_polygon(colour='black', fill='white') +
geom_point(data = weather, aes(x= LONGITUDE, y=LATITUDE))
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = weather, aes(x= LONGITUDE, y=LATITUDE))
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
californiaSpol <- sf::st_as_sf(californiaSpol)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = weather, aes(x= LONGITUDE, y=LATITUDE))
stationOverview <- weather %>%
select(STATION, LATITUDE, LONGITUDE) %>%
distinct()
library(dplyr)
stationOverview <- weather %>%
select(STATION, LATITUDE, LONGITUDE) %>%
distinct()
View(stationOverview)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE))
nrow(stationOverview)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal()
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude') +
coord_map('albers')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude') +
coord_map()
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
