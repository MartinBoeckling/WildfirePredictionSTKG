tifImages <- vector()
for (file in fileList){
index <- which(file == fileList)
tifImages[index] <- c(stars::read_stars(paste(basePath, file, sep = '')), tifImages)
}
for (file in fileList){
index <- which(file == fileList)
tifImages[index] <- stars::read_stars(paste(basePath, file, sep = ''))
}
tif <- do.call(tifImages, stars::st_mosaic)
tif <- do.call(stars::st_mosaic, tifImages)
plot(tif)
tif
tif <- st_mosaic(tif1, tif2)
tif <- do.call(stars::st_mosaic, tifImages)
tif <- do.call('stars::st_mosaic', tifImages)
tif <- do.call('st_mosaic', tifImages)
finalTif <- stars::read_stars(tif)
plot(finalTif)
tif <- do.call(st_mosaic, tifImages)
finalTif <- stars::read_stars(tif)
plot(finalTif)
finalTif
tif3 <- stars::read_stars(tfImages[3])
tif3 <- stars::read_stars(tifImages[3])
View(tifImages)
paste(basePath, file, sep = '')
plot(finalTif, axes = TRUE)
tifImages
for (file in fileList){
tifImage <- stars::read_stars(paste(basePath, file, sep = ''))
tif <- stars::st_mosaic(tif, tifImage)
}
for (file in fileList){
tifImage <- stars::read_stars(paste(basePath, file, sep = ''))
tif <- stars::st_mosaic(tif, tifImage)
}
plot(tif, axes = TRUE)
tif3 <- stars::read_stars(tifImages[3])
tifImages
tif1 <- stars::read_stars("C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/USGS_13_n33w115_20211215.tif")
tif2 <- stars::read_stars("C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/USGS_13_n33w116_20170131.tif")
tif3 <- stars::read_stars("C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/USGS_13_n33w117_20180313.tif")
plot(tif1)
plot(tif2)
plot(tif3)
tif <- st_mosaic(tif1, tif2, tif3)
plot(tif, axes = TRUE)
View(tif1)
tif1[["USGS_13_n33w115_20211215.tif"]]
tif <- Map(st_mosaic, tifImages)
plot(tif, axes = TRUE)
View(tif)
tif <- do.call(st_mosaic, tifImages)
tif <- stars::st_mosaic(do.call(st_mosaic, tifImages))
plot(tif, axes = TRUE)
tif <- st_mosaic(tif1, tif2, tif3)
plot(tif, axes = TRUE)
fileList
paste(basePath, fileList, sep='')
fileList <- paste(basePath, fileList, sep='')
read_stars(fileList)
do.call(read_stars, fileList)
do.call(fileList, read_stars)
tif <-  stars::read_stars("C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/USGS_13_n33w115_20211215.tif")
for (file in fileList){
tifImage <- stars::read_stars(file)
tif <- stars::st_mosaic(tif, tifImage)
}
plot(tif, axes = TRUE)
#--------------------Create base map----------------------------
# load California map from ggplot
california_boundary <- st_read('~/Document/Github/wildfirearea/data/spatial data/california boundary/CA_State_TIGER2016.shp')
#--------------------Create base map----------------------------
# load California map from ggplot
california_boundary <- st_read('~/Github/wildfirearea/data/spatial data/california boundary/CA_State_TIGER2016.shp')
View(tif)
#--------------------Create base map----------------------------
# load California map from ggplot
california_boundary <- st_read('~/Github/wildfirearea/Data/California Boundary/CA_State_TIGER2016.shp')
california_spol <- as_Spatial(california_boundary)
plot(california_spol)
CRS(tif)
CRS(california_spol)
tif$file86b812f663c9.tif
tif
names(tif) <- 'elevation'
plot(tif, axes = TRUE, col = colorPalette)
plot(tif, axes = TRUE, breaks = 'equal', col = colorPalette)
plot(tif, axes = TRUE, breaks = 'equal', col = terrain.colors(10))
plot(tif, axes = TRUE, breaks = 'equal')
plot(tif, axes = TRUE)
plot(california_spol)
california_spol
plot(california_spol, axes=TRUE)
tif
test <- st_warp(tif, crs = 3857, cell)
test <- st_warp(tif, crs = 3857)
tif <-  stars::read_stars("C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/USGS_13_n33w115_20211215.tif")
test <- st_warp(tif, crs = 3857)
plot(tif, axes = TRUE)
for (file in fileList){
tifImage <- stars::read_stars(file)
tif <- stars::st_mosaic(tif, tifImage)
}
plot(tif, axes = TRUE)
tif#
typeof(tif)
class(tif)
rm(list=ls())
renv::snapshot()
#------------------------------import packages----------------------------------
library(stars)
#------------------------------Script settings----------------------------------
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
fileList[0]
fileList[1]
#------------------------------merge tif files----------------------------------
tif <-  stars::read_stars(fileList[1])
plot(tif)
for (file in fileList){
tifImage <- stars::read_stars(file)
tif <- stars::st_mosaic(tif, tifImage)
}
#------------------------prepare and save data----------------------------------
names(tif) <- 'elevation'
plot(tif, axes = TRUE)
View(tif)
stars::write_stars(obj = tif,
dsn = '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.shp',
driver = detect.driver(dsn))
fileName <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.shp'
stars::write_stars(obj = tif,
dsn = fileName,
driver = detect.driver(fileName))
stars::write_stars(obj = tif,
dsn = fileName,
driver = detect.driver(fileName))
stars::write_stars(obj = tif, dsn = fileName)
fileName <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
stars::write_stars(obj = tif,
dsn = fileName,
driver = detect.driver(fileName))
stars::write_stars(obj = tif,
dsn = fileName,
layer = 'elevation',
driver = detect.driver(fileName))
st_as_sf(tif[1], as_points = FALSE, merge = FALSE)
tif
tif$elevation
object.size(tif)
stars::write_stars(obj = adrop(tif[1]),
dsn = fileName,
layer = 'elevation',
driver = detect.driver(fileName))
stars::write_stars(obj = adrop(tif[1]),
dsn = fileName,
driver = detect.driver(fileName))
st_raster_type(tif)
st_dimensions(tif)
st_as_sf(tif)
plot(tif)
View(tif)
tif[["elevation"]]
test <- stars::read_stars('~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(test)
detect.driver(fileName)
stars::write_stars(obj = adrop(tif[1]),
dsn = fileName,
driver = detect.driver(fileName))
gdal_write
stars::write_stars(obj = adrop(tif[1]),
dsn = fileName,
driver = detect.driver(fileName))
stars::write_stars(obj = tif[1],
dsn = fileName,
driver = detect.driver(fileName))
st_collection_extract(tif)
length(fileList)
?st_mosaic
st_mosaic(fileList)
st_mosaic(fileList, tif)
warnings()
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
for (file in fileList){
index = which(file == fileList)
tifImage <- stars::read_stars(file)
if(index == length(fileList)){
tif <- stars::st_mosaic(tif,
tifImage,
dst = '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
print('Successfully tif image stored')
}
else{
tif <- stars::st_mosaic(tif, tifImage)
}
}
for (file in fileList){
index = which(file == fileList)
tifImage <- stars::read_stars(file)
if(index == length(fileList)){
tif <- stars::st_mosaic(tif,
tifImage,
dst = '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
print('Successfully tif image stored')
}
else{
tif <- stars::st_mosaic(tif, tifImage)
}
}
warnings()
GDAL_MAX_DATASET_POOL_SIZE
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
#-------------------- Basic parameters-------------------------
prj_dd <- 'EPSG:3785'
index
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
for (file in fileList){
index = which(file == fileList)
tifImage <- stars::read_stars(file)
if(index[1] == length(fileList)){
tif <- stars::st_mosaic(tif,
tifImage,
dst = '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
print('Successfully tif image stored')
}
else{
tif <- stars::st_mosaic(tif, tifImage)
}
}
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
test <- st_warp(tif, crs = 32636, cellsize = 90)
plot(tif)
plot(test)
plot(test, axes=TRUE)
test <- st_warp(tif, crs = 3857, cellsize = 90)
plot(test, axes=TRUE)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
tif <- st_warp(tif, crs = 3857, cellsize = 90)
for (file in fileList){
index = which(file == fileList)
tifImage <- stars::read_stars(file)
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
if(index[1] == length(fileList)){
tif <- stars::st_mosaic(tif,
tifImage,
dst = '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
print('Successfully tif image stored')
}
else{
tif <- stars::st_mosaic(tif, tifImage)
}
}
plot(tif, axes=TRUE)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
tif <- st_warp(tif, crs = 3857, cellsize = 90)
for (file in fileList){
index = which(file == fileList)
tifImage <- stars::read_stars(file)
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
tif <- stars::st_mosaic(tif, tifImage)
}
plot(tifImage)
plot(tif)
fileList
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
rm(list = ls())
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1])
tif <- st_warp(tif, crs = 3857, cellsize = 90)
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file)
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
tif <- stars::st_mosaic(tif, tifImage)
}
tifImage
tif
?st_mosaic
rm(list = ls())
gc()
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file, package = 'stars')
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
tif <- stars::st_mosaic(tif, tifImage)
}
tif
tifImage
plot(tif)
View(tif)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
names(tif) <- 'elevation'
print(tif)
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file, package = 'stars')
names(tifImage) <- 'elevation'
print(tifImage)
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(tifImage)
tif <- stars::st_mosaic(tif, tifImage)
}
class(tif)
class(tifImage)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
names(tif) <- 'elevation'
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file, package = 'stars')
names(tifImage) <- 'elevation'
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
}
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
names(tif) <- 'elevation'
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file, package = 'stars')
names(tifImage) <- 'elevation'
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
print(class(tif))
}
tif
st_warp(tif, tifImage)
library(raster)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
grid <- raster(fileList[1])
plot(grid)
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
grid1 <- raster(fileList[1])
rm(grid)
grid2 <- raster(fileList[2])
gridTotal <- merge(grid1, grid2)
plot(gridTotal)
rm(list=ls())
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
#------------------------------merge tif files----------------------------------
# read in initial tif image to be able to recursively append file
gridTotal <- raster(fileList[1])
for (file in fileList){
index = which(file == fileList)
print(index)
grid <- raster(file)
gridTotal <- merge(gridTotal, grid)
}
plot(gridTotal)
gridTotal
rm(list=ls())
#------------------------------import packages----------------------------------
library(stars)
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files/'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
names(tif) <- 'elevation'
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(file, package = 'stars')
names(tifImage) <- 'elevation'
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
print(class(tif))
}
tif <-  stars::read_stars(fileList[1], package = 'stars')
tif <- st_warp(tif, crs = 3857, cellsize = 90)
for (file in fileList){
index = which(file == fileList)
print(index)
tifImage <- stars::read_stars(fileList[index], package = 'stars')
print(class(tifImage))
tifImage <- st_warp(tifImage, crs = 3857, cellsize = 90)
print(class(tifImage))
tif <- stars::st_mosaic(tif, tifImage)
print(class(tif))
}
fileList[34]
test <- read_stars(fileList[34])
plot(test)
tif <- st_mosaic(tif, test)
class(tif)
tif
class(fileList)
typeof(fileList)
type(fileList)
objects(fileList)
read_stars(.x = fileList)
read_stars(.x = fileList, along = 3)
?read_stars(.x = fileList, along = 3)
?read_stars(.x = fileList, along = NA)
read_stars(.x = fileList, along = NA)
?st_mosaic
st_mosaic(.x=fileList)
warnings()
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif')
fileList <- paste(basePath, fileList, sep='')
?list.files
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif', full.names = TRUE)
st_mosaic(.x=fileList)
totalTif <- st_mosaic(.x=fileList)
plot(totalTif)
?st_mosaic
fileName <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
fileName <- 'C/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
totalTif <- st_mosaic(.x=fileList, dst = fileName)
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
fileName <- 'C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif'
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
read_stars('~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(totalTif)
test <- read_stars('~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(test)
totalTif <- st_mosaic(.x=fileList)
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
totalTif <- read_stars('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
test <- st_warp(totalTif, crs = 3857, cellsize = 90)
library(raster)
totalTif <- raster('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(totalTif)
totalTif <- read_stars('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(totalTif)
rm(list=ls())
#------------------------------Script preparation-------------------------------
# specify base path
basePath <- '~/GitHub/wildfirearea/Data/Elevation/Tiff elevation/Single Files'
# define list of all single tif files and merge with base path
fileList <- list.files(path = basePath, pattern = '.tif', full.names = TRUE)
?paste0
getwd()
setwd('C:/Users/D070547/Documents/GitHub/wildfirearea')
getwd()
fileName <- paste0(getwd(), '/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
# merge file together with mosaic
totalTif <- st_mosaic(.x=fileList, dst = fileName, file_ext = 'tif')
californiaElevation <- read_stars('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
plot(californiaElevation)
californiaElevation <- raster('C:/Users/D070547/Documents/GitHub/wildfirearea/Data/Elevation/Tiff elevation/CaliforniaElevation.tif')
californiaElevation
plot(californiaElevation)
test <- projectRaster(californiaElevation, crs = crs('EPSG:3785'))
