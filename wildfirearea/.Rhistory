library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)
library(leaflet)
library(ggplot2)
library(elevatr)
library(rgdal)
usa <- map_data('state')
california <- usa %>%
filter(region == 'california') %>%
select(c(long, lat)) %>%
rename(c(x = long, y = lat))
prj_dd <- "EPSG:4326"
california_sp <- SpatialPoints(california, proj4string = CRS(prj_dd))
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
library(sf)
library(sp)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)
library(leaflet)
library(ggplot2)
library(elevatr)
library(rgdal)
# transform coordinates to spatial polygon
california_polygon <- sp::Polygon(cbind(california$x, california$y))
california_spol <- sp::SpatialPolygons(
list(sp::Polygons(list(california_polygon), ID='base')),
proj4string = CRS(prj_dd)
)
# create hexagonal grid
size <- 0.1
hex_points <- spsample(california_spol, type='hexagonal', offset=c(0,0), cellsize=size)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = size)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_points, col = "black", pch = 20, cex = 0.5, add = T)
plot(hex_grid, border = "orange", add = T)
library(sp)
sp::spsample
summary(hex_grid)
View(hex_grid)
# create hexagonal grid
size <- 10000
hex_points <- spsample(california_spol, type='hexagonal', cellsize=size)
#--------------------Create base map----------------------------
# load California map from ggplot
california_boundary <- st_read('~/Document/Github/wildfirearea/data/spatial data/california boundary/CA_State_TIGER2016.shp')
# load packages for spatial operations
library(sf)
california_boundary <- st_read('~/Document/Github/wildfirearea/data/spatial data/california boundary/CA_State_TIGER2016.shp')
california_spol <- as_Spatial(california_boundary)
# create hexagonal grid
size <- 10000
hex_points <- spsample(california_spol, type='hexagonal', cellsize=size)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = size)
summary(hex_grid)
View(hex_grid)
hex_grid@polygons[[1]]@Polygons[[1]]@area
summary(hex_grid)
library(raster)
area(hex_grid)
unqiue(area(hex_grid))
unique(area(hex_grid))
summary(hex_grid)
View(california_boundary)
california_boundary$geometry
data("meuse.grid")
View(meuse.grid)
View(meuse.grid)
rm(meuse.grid)
View(california_sp)
View(hex_points)
hex_points@coords
# create hexagonal grid
size <- 1961.8873
hex_points <- spsample(california_spol, type='hexagonal', cellsize=size)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = size)
View(hex_grid)
hex_grid@polygons[[1]]@Polygons[[1]]@area
unique(area(hex_grid))
# create hexagonal grid
size <- 10000
hex_points <- spsample(california_spol, type='hexagonal', cellsize=size)
View(hex_points)
hex_points@coords
View(california_spol)
california_spol@bbox
# create hexagonal grid
# area in square meters
area <- 10000000
cellSize <- 2 * sqrt(area/((3*sqrt(3)/2))) * sqrt(3)/2
hex_points <- spsample(california_spol, type='hexagonal', cellsize=cellSize)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = cellSize)
unique(area(hex_grid))
View(hex_grid)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_points, col = "black", pch = 20, cex = 0.5, add = T)
plot(hex_grid, border = "orange", add = T)
california_spol
summary(california_spol)
View(california_boundary)
california_boundary$geometry
rm(list=ls())
# load packages for spatial operations
library(sf)
library(sp)
#-------------------- Basic parameters-------------------------
prj_dd <- 'EPSG:3785'
#--------------------Create base map----------------------------
# load California map from ggplot
california_boundary <- st_read('~/Document/Github/wildfirearea/data/spatial data/california boundary/CA_State_TIGER2016.shp')
california_spol <- as_Spatial(california_boundary)
# create hexagonal grid
# area in square meters
area <- 10000000
cellSize <- 2 * sqrt(area/((3*sqrt(3)/2))) * sqrt(3)/2
hex_points <- spsample(california_spol, type='hexagonal', cellsize=cellSize)
hex_grid <- HexPoints2SpatialPolygons(hex_points, dx = cellSize)
View(hex_points)
gc()
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_points, col = "black", pch = 20, cex = 0.5, add = T)
plot(hex_grid, border = "orange", add = T)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
?plot
plot(hex_grid, border = "orange", add = T)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_points, col = "black", pch = 20, cex = 0.5, add = T)
plot(hex_grid, border = "orange", add = T, lwd=0.3)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_points, col = "black", pch = 20, cex = 0.5, add = T)
plot(hex_grid, border = "orange", add = T, lwd=0.1)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_grid, border = "orange", add = T, lwd=0.25)
load("~/OneDrive/UniversitaÌˆt Mannheim/3. Semster/Large Scale Data Integration Seminar/R Data/DataAnalysis.RData")
library(igraph)
library(visNetwork)
library(tidyverse)
# read and prepare data
data <- read.csv(file.choose())
View(data)
View(data)
data <- as.data.frame(data)
data <- data %>%
select(c('keyword1', 'keyword2', 'keyword3', 'keyword4', 'keyword5'))
data <- as.matrix(data)
# create edges overview
edges <- do.call(rbind.data.frame, lapply(1:(nrow(data)-1), function(i) t(combn(data[i,], 2))))
edges <- edges %>%
rename('from' = 'V1', 'to' = 'V2') %>%
group_by(from, to) %>%
summarise(width=n()) %>%
mutate(title = paste('Questions:', width))
# build graph on edges
graph <- graph_from_data_frame(edges, directed = FALSE)
graph <- igraph::simplify(graph)
View(graph)
summary(graph)
# load packages for spatial operations
library(sf)
library(sp)
# load packages for spatial operations
library(sf)
library(sp)
library(raster)
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)
R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.
Natural language support but running in an English locale
R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.
Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
[Workspace loaded from ~/GitHub/wildfirearea/wildfirearea/.RData]
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)
R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.
Natural language support but running in an English locale
R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.
Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
[Workspace loaded from ~/GitHub/wildfirearea/wildfirearea/.RData]
Loading required package: sp
> # load packages for spatial operations
> library(sf)
Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1
There were 41 warnings (use warnings() to see them)
> library(sp)
> library(raster)
> hex_points
plot(hex_points)
#----------------------Elevation-------------------------
# read elevation
rasterHeight <- raster('~Github/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
#----------------------Elevation-------------------------
# read elevation
rasterHeight <- raster('~Document/Github/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
#----------------------Elevation-------------------------
# read elevation
rasterHeight <- raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
View(rasterHeight)
plot(rasterHeight)
rasterHeight@w001001
rasterHeight$w001001
#----------------------Elevation-------------------------
# read elevation
rasterElevation <- st_read('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
st_drivers
st_drivers()
#----------------------Elevation-------------------------
# read elevation
rasterElevation <- raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
class(rasterElevation)
View(rasterElevation)
?raster
polygonElevation <- rasterToPolygons(rasterElevation)
gc()
rm(rasterHeight)
# extract values from raster to hexagonal grid
raster::extract(rasterElevation, hex_grid)
crs(rasterElevation)
crs(hex_grid)
CRS('EPSG:3785')
#-------------------- Basic parameters-------------------------
prj_dd <- 'EPSG:3785'
test <- projectRaster(from=rasterElevation, crs = prj_dd)
plot(test)
rasterElevation <- projectRaster(from=rasterElevation, crs = prj_dd)
# extract values from raster to hexagonal grid
test <- extract(x = rasterElevation, y = hex_grid)
View(test)
plot(hex_grid, border = "orange", add = T, lwd=0.25)
CRS(rasterElevation)
View(rasterElevation)
rasterElevation@crs@projargs
hex_grid@proj4string@projargs
CRS(prj_dd)
crs(rasterElevation)
summary(hex_grid)
#----------------------Elevation-------------------------
# read elevation
rasterElevation <- raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
View(rasterElevation)
rm(test)
#----------------------Elevation-------------------------
# read elevation
rasterElevation <- raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
# transform CRS to standard
rasterElevation <- projectRaster(from=rasterElevation, crs = prj_dd)
# extract values from raster to hexagonal grid
elevationDf <- extract(x = rasterElevation, y = hex_grid, na.rm = TRUE, fun = 'mean', cellnumbers = TRUE, df = TRUE)
library(raster)
library(sp)
# load packages for spatial operations
library(sf)
# extract values from raster to hexagonal grid
elevationDf <- extract(x = rasterElevation, y = hex_grid, na.rm = TRUE,  fun = 'mean', cellnumbers = TRUE, df = TRUE)
# extract values from raster to hexagonal grid
elevationDf <- raster::extract(x = rasterElevation, y = hex_grid, na.rm = TRUE,  fun = 'mean', cellnumbers = TRUE, df = TRUE)
?raster::extract
# extract values from raster to hexagonal grid
elevationDf <- raster::extract(x = rasterElevation, y = hex_grid, fun = 'mean', na.rm = TRUE, cellnumbers = TRUE, df = TRUE)
# extract values from raster to hexagonal grid
elevationDf <- raster::extract(x = rasterElevation, y = hex_grid, fun = mean, na.rm = TRUE, cellnumbers = TRUE, df = TRUE)
View(elevationDf)
extent(rasterElevation)
extent(hex_grid)
View(hex_grid)
View(hex_grid)
hex_grid@proj4string@projargs
library(sf)
library(sp)
library(raster)
library(sf)
library(sp)
library(raster)
plot(california_spol, col = "grey50", bg = "light blue", axes = TRUE)
plot(hex_points, col = "black", pch = 20, cex = 0.5, add = T)
plot(hex_grid, border = "orange", add = T, lwd=0.25)
hex_grid@bbox
View(rasterElevation)
rasterElevation@extent
View(elevationDf)
sum(is.na(elevationDf))
plot(rasterElevation)
# transform CRS to standard
rasterElevation <- projectRaster(from=rasterElevation, crs = prj_dd)
plot(rasterElevation)
#----------------------Elevation-------------------------
# read elevation
rasterElevation <- raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
# transform CRS to standard
rasterElevation <- projectRaster(from=rasterElevation, crs = prj_dd)
plot(rasterElevation)
?SpatialPolygonsDataFrame
View(elevationDf)
# combine dataframe to spatial polygons data
testElevation <- SpatialPolygonsDataFrame(hex_grid, elevationDf)
View(hex_grid)
rownames(elevationDf)
# change values of ID to matching items in data frame
testName <- paste('ID', rownames(elevationDf), sep='')
# change values of ID to matching items in data frame
rownames(elevationDf) <- paste('ID', rownames(elevationDf), sep='')
View(elevationDf)
# combine dataframe to spatial polygons data
testElevation <- SpatialPolygonsDataFrame(hex_grid, elevationDf)
View(testElevation)
# combine dataframe to spatial polygons data
hexGridElevation <- SpatialPolygonsDataFrame(hex_grid, elevationDf)
rm(testElevation, testName)
View(hexGridElevation)
ggplot() +
geom_sf(data=hexGridElevation, aes(fill = w001001))
library(ggplot2)
ggplot() +
geom_sf(data=hexGridElevation, aes(fill = w001001))
ggplot() +
geom_sf(data=hexGridElevation, aes(fill = data))
ggplot() +
geom_sf(data=hexGridElevation, aes(fill = data$w001001))
hexGridElevation
hexGridElevation$w001001
ggplot() +
geom_sf(data=hexGridElevation, aes(fill = w001001))
View(hex_grid)
typeof(hexGridElevation)
class(hexGridElevation)
View(rasterElevation)
ggplot(hexGridElevation) +
geom_sf()
ggplot() +
ggspatial::geom_spatial(data=hexGridElevation, fill=w001001) +
theme_void() +
coord_map()
ggplot() +
ggspatial::geom_spatial_polygon(data=hexGridElevation, fill=w001001) +
theme_void() +
coord_map()
ggplot() +
ggspatial::geom_spatial_polygon(data=hexGridElevation) +
theme_void() +
coord_map()
install.packages('renv')
renv::init()
renv::snapshot()
