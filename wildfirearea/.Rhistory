mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
top_n(n=1)
View(test)
test <- weather %>%
select(DATE, TMAX) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX))
View(test)
test <- weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX))
View(test)
View(test)
ggplot(test, aes(MONTH, YEAR, TMAX)) %>%
geom_tile()
ggplot(test, aes(MONTH, YEAR, fill=TMAX)) %>%
geom_tile()
ggplot(test, aes(MONTH, YEAR, fill=TMAX)) +
geom_tile()
ggplot(test, aes(MONTH, YEAR, fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
ggplot(test, aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
colnames(weather)
NAColumnPlot(weather)
### Precipitation --------------------------------------------------------------
# print distribution statistics to console
summary(weather$PRCP)
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = max(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
theme_minimal()
### Precipitation --------------------------------------------------------------
#### PRCP
# print distribution statistics to console
summary(weather$PRCP)
### Precipitation --------------------------------------------------------------
#### PRCP
# print distribution statistics to console
minPRCP <- 0
maxPRCP <- 656.08
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth=binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
View(test)
# import packages --------------------------------------------------------------
library(ggplot2)
library(lubridate)
library(dichromat)
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
library(dplyr)
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab('Month') +
ylab('Year') +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX))
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab('Month') +
ylab('Year') +
theme_minimal()
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
aggFun <- parse(text = aggString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = aggFun(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max', 'Month', 'Year')
aggFun <- parse(text = 'max')
aggFun(2)
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max()', 'Month', 'Year')
aggFun <- parse(text = 'max()')
aggFun
aggFun(5)
eval(aggFun)
eval(aggFun(50))
as.formula('max()')
aggFun <- 'max(weather$TMAX)'
eval(aggFun)
aggFun <- parse(text=aggFun)
eval(aggFun)
aggFun <- 'max(weather$TMAX, na.rm=TRUE)'
aggFun <- parse(text=aggFun)
eval(aggFun)
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
aggFun <- parse(text = aggString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max(TMAX)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max(TMAX)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'TMIN', minTemperature, maxTemperature, 'min(TMIN)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'TAVG', minTemperature, maxTemperature, 'mean(TAVG)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'tavg', minTemperature, maxTemperature, 'mean(TAVG)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'tavg', minTemperature, maxTemperature, 'mean(TAVG)', 'Month', 'Year')
summary(weather$PRCP)
# plot histogram with histogramPlot function
histogramPlot(weather, "PRCP", minPRCP, maxPRCP, 5, 'Precipitation in °C')
# plot histogram with histogramPlot function
histogramPlot(weather, "PRCP", minPRCP, maxPRCP, 5, 'Precipitation in mm')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
label(colour=column)
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
labs(colour=column) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
labs(fill=column) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
#### DAPR
summary(weather$DAPR)
#### DWPR
summary(weather$DWPR)
#### MDPR
summary(weather$MDPR)
### SNOW
summary(weather$SNOW)
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'max(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'min(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minPRCP, maxPRCP, 'mean(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minPRCP, maxPRCP, 'max(PRCP)', 'Month', 'Year')
# plot histogram with histogramPlot function
histogramPlot(weather, "MDPR", minPRCP, maxPRCP, 5, 'Precipitation in mm')
# plot histogram with histogramPlot function
histogramPlot(weather, "MDPR", minPRCP, maxPRCP, 10, 'Precipitation in mm')
# distribution of data over month and year
heatmapDatePlot(weather, 'MDPR', minPRCP, maxPRCP, 'mean(MDPR)', 'Month', 'Year')
