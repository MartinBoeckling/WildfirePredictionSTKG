group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth=binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
View(test)
# import packages --------------------------------------------------------------
library(ggplot2)
library(lubridate)
library(dichromat)
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
library(dplyr)
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab('Month') +
ylab('Year') +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX))
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab('Month') +
ylab('Year') +
theme_minimal()
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
aggFun <- parse(text = aggString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = aggFun(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max', 'Month', 'Year')
aggFun <- parse(text = 'max')
aggFun(2)
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max()', 'Month', 'Year')
aggFun <- parse(text = 'max()')
aggFun
aggFun(5)
eval(aggFun)
eval(aggFun(50))
as.formula('max()')
aggFun <- 'max(weather$TMAX)'
eval(aggFun)
aggFun <- parse(text=aggFun)
eval(aggFun)
aggFun <- 'max(weather$TMAX, na.rm=TRUE)'
aggFun <- parse(text=aggFun)
eval(aggFun)
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
aggFun <- parse(text = aggString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max(TMAX)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'TMAX', minTemperature, maxTemperature, 'max(TMAX)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'TMIN', minTemperature, maxTemperature, 'min(TMIN)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'TAVG', minTemperature, maxTemperature, 'mean(TAVG)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'tavg', minTemperature, maxTemperature, 'mean(TAVG)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'tavg', minTemperature, maxTemperature, 'mean(TAVG)', 'Month', 'Year')
summary(weather$PRCP)
# plot histogram with histogramPlot function
histogramPlot(weather, "PRCP", minPRCP, maxPRCP, 5, 'Precipitation in °C')
# plot histogram with histogramPlot function
histogramPlot(weather, "PRCP", minPRCP, maxPRCP, 5, 'Precipitation in mm')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
label(colour=column)
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
labs(colour=column) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
heatmapDatePlot <- function(df, column, minValue, maxValue, funString, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input column needs to be present in input dataframe' = column %in% colnames(df))
aggFun <- parse(text = funString)
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(aggColumn = eval(aggFun)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=aggColumn)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
labs(fill=column) +
theme_minimal()
}
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
#### DAPR
summary(weather$DAPR)
#### DWPR
summary(weather$DWPR)
#### MDPR
summary(weather$MDPR)
### SNOW
summary(weather$SNOW)
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'max(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'min(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minTemperature, maxTemperature, 'mean(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minPRCP, maxPRCP, 'mean(PRCP)', 'Month', 'Year')
# distribution of data over month and year
heatmapDatePlot(weather, 'PRCP', minPRCP, maxPRCP, 'max(PRCP)', 'Month', 'Year')
# plot histogram with histogramPlot function
histogramPlot(weather, "MDPR", minPRCP, maxPRCP, 5, 'Precipitation in mm')
# plot histogram with histogramPlot function
histogramPlot(weather, "MDPR", minPRCP, maxPRCP, 10, 'Precipitation in mm')
# distribution of data over month and year
heatmapDatePlot(weather, 'MDPR', minPRCP, maxPRCP, 'mean(MDPR)', 'Month', 'Year')
### Snowfall -------------------------------------------------------------------
#### SNOW
minSNOW <- 0
maxSNOW <-
summary(weather$SNOW)
maxSNOW <-
summary(weather$SNOW)
# maxSNOW <-
summary(weather$SNOW)
rm(maxSNOW)
maxSNOW <- 1701.8
histogramPlot(weather, "SNOW", minSNOW, maxSNOW, 10, 'Snowfall in mm')
# import packages --------------------------------------------------------------
library(ggplot2)
library(lubridate)
library(dplyr)
histogramPlot(weather, "SNOW", minSNOW, maxSNOW, 10, 'Snowfall in mm')
# heatmap average over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'mean(MDPR)', 'Month', 'Year')
# heatmap average over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'mean(SNOW)', 'Month', 'Year')
# heatmap average over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'max(SNOW)', 'Month', 'Year')
# heatmap average over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'mean(SNOW)', 'Month', 'Year')
# heatmap median over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'median(SNOW)', 'Month', 'Year')
# heatmap max over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'max(SNOW)', 'Month', 'Year')
# heatmap minimum over month and year
heatmapDatePlot(weather, 'SNOW', minSNOW, maxSNOW, 'min(SNOW)', 'Month', 'Year')
histogramPlot(weather, "SNOW", minSNOW, maxSNOW, 5, 'Snowfall in mm')
histogramPlot(weather, "SNOW", minSNOW, maxSNOW, 30, 'Snowfall in mm')
histogramPlot(weather, "SNOW", minSNOW, maxSNOW, 10, 'Snowfall in mm')
# SNWD
summary(weather$SNWD)
# SNWD
minSNWD <- 0
maxSNWD <- 11455.4
summary(weather$SNWD)
histogramPlot(weather, "SNWD", minSNWD, maxSNWD, 10, 'Snowdepth in mm')
histogramPlot(weather, "SNWD", minSNWD, maxSNWD, 50, 'Snowdepth in mm')
# heatmap average snow depth over month and year
heatmapDatePlot(weather, 'SNWD', minSNOW, maxSNOW, 'mean(SNWD)', 'Month', 'Year')
# heatmap average snow depth over month and year
heatmapDatePlot(weather, 'SNWD', minSNWD, minSNWD, 'mean(SNWD)', 'Month', 'Year')
# heatmap average snow depth over month and year
heatmapDatePlot(weather, 'SNWD', minSNWD, maxSNWD, 'mean(SNWD)', 'Month', 'Year')
# heatmap max snow depth over month and year
heatmapDatePlot(weather, 'SNWD', minSNWD, maxSNWD, 'max(SNWD)', 'Month', 'Year')
# heatmap min snow depth over month and year
heatmapDatePlot(weather, 'SNWD', minSNWD, maxSNWD, 'min(SNWD)', 'Month', 'Year')
### Cloudiness --------------------------------------------------------------------
#### ACMC
summary(weather$ACMH)
### Cloudiness --------------------------------------------------------------------
# Cloudiness limit parameters
minCloudiness <- 0
maxCloudiness <- 100
#### ACMC
summary(weather$ACMH)
histogramPlot(weather, 'ACMH', minCloudiness, maxCloudiness, 5, 'manual Cloudiness observation in %')
histogramPlot(weather, 'ACMH', minCloudiness, maxCloudiness, 10, 'manual Cloudiness observation in %')
heatmapDatePlot(weather, 'ACMH', minSNWD, maxSNWD, 'mean(ACMH)', 'Month', 'Year')
#### ACSH
summary(weather$ACSH)
histogramPlot(weather, 'ACSH', minCloudiness, maxCloudiness, 10, 'manual Cloudiness observation in %')
heatmapDatePlot(weather, 'ACSH', minSNWD, maxSNWD, 'mean(ACSH)', 'Month', 'Year')
### Wind --------------------------------------------------------------------------
# Wind limit parameters
minWind <- 0
#### AWND
summary(weather$AWND)
histogramPlot(weather, 'AWND', minWind, maxWind, 5, 'average windspeed in meter per second')
### Wind --------------------------------------------------------------------------
# Wind limit parameters
minWind <- 0
maxWind <- 88.961
histogramPlot(weather, 'AWND', minWind, maxWind, 5, 'average windspeed in meter per second')
histogramPlot(weather, 'AWND', minWind, maxWind, 3, 'average windspeed in meter per second')
heatmapDatePlot(weather, 'AWND', minWind, maxWind, 'mean(AWND)', 'Month', 'Year')
heatmapDatePlot(weather, 'AWND', minWind, maxWind, 'max(AWND)', 'Month', 'Year')
heatmapDatePlot(weather, 'AWND', minWind, maxWind, 'min(AWND)', 'Month', 'Year')
#### AWND
summary(weather$AWND)
heatmapDatePlot(weather, 'AWND', minWind, maxWind, 'median(AWND)', 'Month', 'Year')
heatmapDatePlot(weather, 'AWND', minWind, maxWind, 'mean(AWND)', 'Month', 'Year')
#### DAWM
summary(weather$DAWM)
histogramPlot(weather, 'DAMN', minWind, maxWind, 3, 'days of multi wind measurement')
histogramPlot(weather, 'DAWM', minWind, maxWind, 3, 'days of multi-day wind measurement')
heatmapDatePlot(weather, 'DAWM', minWind, maxWind, 'mean(DAWM)', 'Month', 'Year')
#### FMTM
summary(weather$FMTM)
summary(weather$FMTM)
# import packages --------------------------------------------------------------
library(ggplot2)
library(lubridate)
library(dplyr)
test <- strptime(na.omit(weather$FMTM), format = '%H%M')
weather$FMTM <- strptime(weather$FMTM, format = '%H%M')
summary(weather$FMTM)
test <- strptime(weather$FMTM, format = '%H%M')
test <- strptime(na.omit(weather$FMTM), format = '%H%M')
test <- na.omit(strptime(weather$FMTM, format = '%H%M'))
test <- strptime(na.omit(weather$FMTM), format = '%H%M')
summary(test)
test <- lubridate::hm(strptime(na.omit(weather$FMTM), format = '%H%M'))
summary(test)
test <- strptime(na.omit(weather$FMTM), format = '%H%M')
summary(test)
rm(test)
gc()
maxHour <- 2400
summary(weather$FMTM)
histogramPlot(weather, 'FNTM', minHour, maxHour, 3, 'Time in hhmm format with highest wind speed')
histogramPlot(weather, 'FMTM', minHour, maxHour, 3, 'Time in hhmm format with highest wind speed')
#### FMTM
minHour <- 0
histogramPlot(weather, 'FMTM', minHour, maxHour, 3, 'Time in hhmm format with highest wind speed')
histogramPlot(weather, 'FMTM', minHour, maxHour, 100, 'Time in hhmm format with highest wind speed')
histogramPlot(weather, 'FMTM', minHour, maxHour, 100, 'Highest wind speed time in hhmm')
heatmapDatePlot(weather, 'FMTM', minHour, maxHour, 'mean(FMTM)', 'Month', 'Year')
