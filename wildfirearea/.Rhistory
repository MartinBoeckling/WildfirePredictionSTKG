#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
californiaSpol <- as_Spatial(california_boundary)
plot(californiaSpol)
plot(california_boundary$geometry)
plot(california_boundary$geometry, axes=TRUE)
library(sp)
?as_Spatial
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
californiaSpol <- as_Spatial(california_boundary)
plot(californiaSpol)
plot(californiaSpol, axes=TRUE)
#-------------------- Basic parameters-------------------------
prj_m <- 'EPSG:3785'
californiaSpol
prjLonLat <- 'EPSG:4269'
st_crs(californiaSpol) = 4269
crs(californiaSpol) = prjLonLat
CRS(californiaSpol) = prjLonLat
CRS(californiaSpol) = prjLonLat
library(sp)
library(sf)
crs(californiaSpol)
CRS(californiaSpol)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram()
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 5)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 10)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 20)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30)
#### Distribution of stations
california_boundary <- st_read('~/Github/wildfirearea/data/californiaBoundary/CA_State_TIGER2016.shp')
californiaSpol <- as_Spatial(california_boundary)
CRS(californiaSpol) = prjLonLat
plot(californiaSpol)
View(californiaSpol)
spTransform(californiaSpol, CRS(prjLonLat))
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
plot(californiaSpol)
plot(californiaSpol, axes=TRUE)
data.frame(californiaSpol)
as.data.frame(californiaSpol)
View(californiaSpol)
View(california_boundary)
View(california_boundary[[15]][[1]])
california_boundary[[15]][[1]][[1]][[1]]
ggplot(californiaSpol, aes(x=x, y=y)) +
geom_polygon()
ggplot(californiaSpol) +
geom_polygon()
ggplot(californiaSpol, aes(x, y)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon()
View(californiaSpol)
californiaSpol@polygons[[1]]@Polygons[[1]]
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon()
californiaSpol <- as_Spatial(california_boundary)
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon()
View(californiaSpol)
californiaSpol@polygons
ggplot(californiaSpol, aes(x=long, y=lat, group=plotOrder)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon()
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colur='black', fill'white')
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colur='black', fill='white')
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colour='black', fill='white')
ggplot(californiaSpol, aes(x=long, y=lat, group=ID)) +
geom_polygon(colour='black', fill='white')
ggplot(californiaSpol, aes(x=long, y=lat, group=id)) +
geom_polygon(colour='black', fill='white')
californiaSpol <- sf::st_as_sf(californiaSpol)
View(californiaSpol)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white')
californiaSpol <- as_Spatial(california_boundary)
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
tidy(californiaSpol)
library(rgdal)
ggplot(californiaSpol) +
geom_polygon(colour='black', fill='white') +
geom_point(data = weather, aes(x= longitude, y=latitude))
colnames(weather)
ggplot(californiaSpol) +
geom_polygon(colour='black', fill='white') +
geom_point(data = weather, aes(x= LONGITUDE, y=LATITUDE))
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = weather, aes(x= LONGITUDE, y=LATITUDE))
californiaSpol <- spTransform(californiaSpol, CRS(prjLonLat))
californiaSpol <- sf::st_as_sf(californiaSpol)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = weather, aes(x= LONGITUDE, y=LATITUDE))
stationOverview <- weather %>%
select(STATION, LATITUDE, LONGITUDE) %>%
distinct()
library(dplyr)
stationOverview <- weather %>%
select(STATION, LATITUDE, LONGITUDE) %>%
distinct()
View(stationOverview)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE))
nrow(stationOverview)
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal()
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude') +
coord_map('albers')
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude') +
coord_map()
ggplot(californiaSpol) +
geom_sf(colour='black', fill='white') +
geom_point(data = stationOverview, aes(x= LONGITUDE, y=LATITUDE)) +
theme_minimal() +
xlab('Longitude') +
ylab('Latitude')
# import packages---------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(sf)
library(sp)
renv::snapshot()
# import packages---------------------------------------------------------------
library(ggplot2)
ggplot(data = weatherNADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Weather column') +
ylab('Percentage of missing observations')
View(weatherNADf)
NAColumnPlot <- function(df){
NADf <- arrange(
data.frame(NAFraction =
sapply(weather, function(column) sum(is.na(column))/nrow(weather))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Weather column') +
ylab('Percentage of missing observations')
}
View(NAColumnPlot)
NAColumnPlot <- function(df){
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Weather column') +
ylab('Percentage of missing observations')
}
?stopifnot
class(weather)
typeof(weather)
test <- class(weather)
NAColumnPlot <- function(df){
# assert
stopifnot(class(df) == c('data.table', 'data.frame'))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Weather column') +
ylab('Percentage of missing observations')
}
View(NAColumnPlot)
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
library(dplyr)
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
library(tibble)
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
### Station attributes -------------------------------------------------
#### Elevation
summary(weather$ELEVATION)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, color=colorPalette[1])
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, color=colorPalette[1], fill=colorPalette[2])
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, color=colorPalette[1], fill=colorPalette[2]) +
xlab('Elevation in meters') +
ylab('Count')
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, color=colorPalette[1], fill=colorPalette[2]) +
xlab('Elevation in meters') +
ylab('Count') +
theme_minimal()
NAColumnPlot <- function(df){
# assert
stopifnot(class(df) == c('data.table', 'data.frame'))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Weather column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
NAColumnPlot <- function(df){
# assert
stopifnot(class(df) == c('data.table', 'data.frame'))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[5]) +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
NAColumnPlot <- function(df){
# assert
stopifnot(class(df) == c('data.table', 'data.frame'))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
# plot count of missing elements
# extract na fraction of weather dataframe
NAColumnPlot(weather)
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, fill=colorPalette[1], color='white') +
xlab('Elevation in meters') +
ylab('Count') +
theme_minimal()
ggplot(data = weather, aes(x=ELEVATION)) +
geom_histogram(binwidth = 30, fill=colorPalette[1]) +
xlab('Elevation in meters') +
ylab('Count') +
theme_minimal()
NAColumnPlot <- function(df){
# assert
stopifnot('data.frame' %in% class(df))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
NAColumnPlot <- function(df){
# assert
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
NADf <- arrange(
data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
), NAFraction)
NADf <- rownames_to_column(NADf, var = 'Column')
# plot na fraction
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
rm(weatherNADf)
NAColumnPlot <- function(df){
# check if input variable is of class data.frame
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
# extract column wise percentage of NA Values by summing boolean return of function is.na up
NADf <- data.frame(NAFraction =
sapply(df, function(column) sum(is.na(column))/nrow(df))
)
#
NADf <- tibble::rownames_to_column(NADf, var = 'Column')
# plot na fraction in a bar diagram
ggplot(data = NADf, aes(x=reorder(Column, -NAFraction), y=NAFraction)) +
geom_bar(stat='identity', fill=colorPalette[1], color='white') +
coord_flip() +
xlab('Column') +
ylab('Percentage of missing observations') +
theme_minimal()
}
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(data = weather, aes(x=TMAX)) +
geom_histogram()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(bins=15)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 15)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 5)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 2)
### Temperature ----------------------------------------------------------------
#### TMAX
# print distribution statistics to console
summary(weather$TMAX)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 4)
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 5) +
theme_minimal() +
xlab('maximum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('maximum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
ggplot(., aes(x=TMIN)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('maximum Temperature in °C') +
ylab('Count')
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
ggplot(., aes(x=TMIN)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('minimum Temperature in °C') +
ylab('Count')
#### TAVG
weather %>%
filter(TAVG <= 56.67 & TAVG >= -42.78) %>%
ggplot(., aes(x=TAVG)) +
geom_histogram(binwidth = 5, fill=colorPalette[1]) +
theme_minimal() +
xlab('average Temperature in °C') +
ylab('Count')
#### TAVG
# print distribution statistics to console
summary(weather$TAVG)
#### TMIN
summary(weather$TMIN)
dnorm()
dnorm
# Elevation ---------------------------------------------------------------
# read elevation dataset
rasterElevation <- raster::raster('~/GitHub/wildfirearea/Data/Elevation/90 m DEM of California, USA/commondata/data0/ca_dem/w001001.adf')
library(raster)
# Elevation ---------------------------------------------------------------
# read elevation dataset
rasterElevation <- raster::raster('~/GitHub/wildfirearea/data/elevation/Tiff elevation/CaliforniaElevation.tif')
# convert rasterElevation type of raster to dataframe
# convert to SpatialPoints Dataframe
rasterElevationPoint <- raster::rasterToPoints(rasterElevation, spatial = TRUE)
rasterElevation
gc()
View(rasterElevation)
# convert Spatial Points dataframe to solely dataframe
rasterElevationDf <- data.frame(rasterElevation)
# convert Spatial Points dataframe to solely dataframe
rasterElevationDf <- as.data.frame(rasterElevation)
rm(rasterElevation)
weather$DATE
as.Date(weather$DATE, %Y)
as.Date(weather$DATE, '%Y')
library(lubridate)
year(weather$DATE)
ggplot(weather, aes(x = year(DATE), y = TMAX)) +
geom_boxplot()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
# plot histogram over distribution
ggplot(., aes(x = year(DATE), y = TMAX)) +
geom_boxplot()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = YEAR, y = TMAX)) +
geom_boxplot()
weather %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = YEAR, y = TMAX, group=YEAR)) +
geom_boxplot()
weather %>%
filter(TAVG <= 56.67 & TAVG >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = YEAR, y = TAVG, group=YEAR)) +
geom_boxplot()
weather %>%
filter(TAVG <= 56.67 & TAVG >= -42.78) %>%
mutate(MONTH = month(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = MONTH, y = TAVG, group=MONTH)) +
geom_boxplot()
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR))
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = year(DATE)) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR), alpha = .5)
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = as.character(year(DATE))) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR), alpha = .5)
weather %>%
filter(TMIN <= 56.67 & TMIN >= -42.78) %>%
filter(TMAX <= 56.67 & TMAX >= -42.78) %>%
mutate(YEAR = as.character(year(DATE))) %>%
# plot histogram over distribution
ggplot(., aes(x = TMIN, y = TMAX)) +
geom_point(aes(color = YEAR), alpha = .5) +
scale_color_manual(values = colorPalette)
