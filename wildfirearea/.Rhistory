xlab('minimum Temperature in °C') +
ylab('Count')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
test
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
re
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# import packages --------------------------------------------------------------
library(ggplot2)
library(dplyr)
### Temperature ----------------------------------------------------------------
# general limit
maxTemperature <- 56.67
minTemperature <- -42.78
# filter data out that is over maximum and minimum
histogramPlot(weather, 'TMAX', minTemperature, maxTemperature, 5, 'max temperature in °C')
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
rlang::last_error()
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(column <= minThreshold & column >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
weather %>%
filter(TMAX <= 10 & column >= 0)
weather %>%
filter(TMAX <= 10 & TMAX >= 0)
weather %>%
filter('TMAX' <= 10 & 'TMAX' >= 0)
weather %>%
filter(!!'TMAX' <= 10 & !!'TMAX' >= 0)
weather %>%
filter(as.symbol('TMAX') <= 10 & as.symbol('TMAX') >= 0)
weather %>%
filter(TMAX <= 10 & column >= 0)
weather %>%
filter(TMAX <= 10 & TMAX >= 0)
test <- 'TMAX'
weather %>%
filter(as.symbol(test) <= 10 & as.symbol(test) >= 0)
weather %>%
filter(!!as.symbol(test) <= 10 & !!as.symbol(test) >= 0)
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=!!as.symbol(column))) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binwidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=column)) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
ggplot(weather, aes(x=!!as.symbol(test))) +
geom_histogram(binwidth = binwidth, fill=colorPalette[1])
ggplot(weather, aes(x=!!as.symbol(test))) +
geom_histogram(binwidth = 50, fill=colorPalette[1])
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=!!as.symbol(column))) +
geom_histogram(binwidth = binWidth, fill=colorPalette[1]) +
theme_minimal() +
xlab(xaxisDesc) +
ylab('Count')
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=!!as.symbol(column))) +
geom_histogram(binwidth = binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
# import packages --------------------------------------------------------------
library(ggplot2)
library(dplyr)
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth = binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth=5, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes_string(x=TMAX)) +
geom_histogram(binwidth=5, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes_string(x='TMAX')) +
geom_histogram(binwidth=5, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minThreshold, maxThreshold, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= minThreshold & !!as.symbol(column) >= maxThreshold) %>%
# plot histogram over distribution
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth=5, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
weather %>%
filter(!!as.symbol(test) <= minThreshold & !!as.symbol(test) >= maxThreshold)
weather %>%
filter(!!as.symbol(test) <= minTemperature & !!as.symbol(test) >= maxTemperature)
weather %>%
filter(!!as.symbol(test) <= maxTemperature & !!as.symbol(test) >= minTemperature)
weather %>%
filter(!!as.symbol(test) <= maxTemperature & !!as.symbol(test) >= minTemperature) %>%
# plot histogram over distribution
ggplot(., aes(x=test)) +
geom_histogram(binwidth=5, fill=colorPalette[1])
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", maxTemperature, minTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth=5, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes(x=TMAX)) +
geom_histogram(binwidth=binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth=binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMAX", minTemperature, maxTemperature, 5, 'max temperature in °C')
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth=binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
# filter data out that is over maximum and minimum
histogramPlot(weather, "TMIN", minTemperature, maxTemperature, 5, 'min temperature in °C')
# plot histogram with histogramPlot function
histogramPlot(weather, "TAVG", minTemperature, maxTemperature, 5, 'avg temperature in °C')
library(lubridate)
colnames(weather)
ggplot(weather, aes(lubridate::month(DATE), lubridate::year(DATE), TAVG)) +
geom_tile()
View(californiaSpol)
View(stationOverview)
length(stationOverview)
length(stationOverview, 1)
nrow(stationOverview)
nrow(distinct(stationOverview$STATION))
nrow(unique(stationOverview$STATION))
unique(stationOverview$STATION)
length(unique(stationOverview$STATION))
test <- weather %>%
select(DATE, TMAX) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
top_n(n=1)
View(test)
test <- weather %>%
select(DATE, TMAX) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX))
View(test)
test <- weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX))
View(test)
View(test)
ggplot(test, aes(MONTH, YEAR, TMAX)) %>%
geom_tile()
ggplot(test, aes(MONTH, YEAR, fill=TMAX)) %>%
geom_tile()
ggplot(test, aes(MONTH, YEAR, fill=TMAX)) +
geom_tile()
ggplot(test, aes(MONTH, YEAR, fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
ggplot(test, aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1])
colnames(weather)
NAColumnPlot(weather)
### Precipitation --------------------------------------------------------------
# print distribution statistics to console
summary(weather$PRCP)
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
slice(which.max(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = max(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
theme_minimal()
weather %>%
select(DATE, TMAX) %>%
filter(TMAX <= maxTemperature & TMAX >= minTemperature) %>%
mutate(MONTH = month(DATE),
YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(TMAX = min(TMAX)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=TMAX)) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
theme_minimal()
### Precipitation --------------------------------------------------------------
#### PRCP
# print distribution statistics to console
summary(weather$PRCP)
### Precipitation --------------------------------------------------------------
#### PRCP
# print distribution statistics to console
minPRCP <- 0
maxPRCP <- 656.08
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
geom_tile() +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
histogramPlot <- function(df, column, minValue, maxValue, binWidth, xaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
df %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
# plot histogram over distribution
ggplot(., aes_string(x=column)) +
geom_histogram(binwidth=binWidth, fill=colorPalette[1]) +
xlab(xaxisDesc) +
ylab('Count') +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = !!as.symbol(column)) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
heatmapDatePlot <- function(df, column, minValue, maxValue, aggFun, xaxisDesc, yaxisDesc){
stopifnot('Input dataframe needs to be of class data.frame' = 'data.frame' %in% class(df))
stopifnot('Input dataframe needs to be present in input df' = column %in% colnames(df))
df %>%
select(DATE, !!as.symbol(column)) %>%
filter(!!as.symbol(column) <= maxValue & !!as.symbol(column) >= minValue) %>%
mutate(MONTH = month(DATE), YEAR = year(DATE)) %>%
group_by(MONTH, YEAR) %>%
summarise(!!as.symbol(column) = min(!!as.symbol(column))) %>%
ggplot(., aes(factor(MONTH), factor(YEAR), fill=!!as.symbol(column))) +
scale_fill_gradient(low=colorPalette[20], high=colorPalette[1]) +
xlab(xaxisDesc) +
ylab(yaxisDesc) +
theme_minimal()
}
View(test)
